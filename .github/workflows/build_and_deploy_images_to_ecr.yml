name: Deploy to AWS

on:
  push:
    branches: [master]

env:
  ECS_TASK_DEFINITION: ./.aws/task-definition.json
  API_GATEWAY_CONTAINER: api_gateway
  AUTH_SERVICE_CONTAINER: auth
  CONNECT_SERVICE_CONTAINER: connect
  KYC_SERVICE_CONTAINER: kyc
  MAIL_SERVICE_CONTAINER: mail
  PAYMENT_SERVICE_CONTAINER: payment
  INSIGHT_SERVICE_CONTAINER: insight

jobs:
  configure_tag:
    environment: prod
    name: Configure SHA for container tag
    runs-on: ubuntu-latest
    outputs:
      short_sha: ${{ steps.short_sha.outputs.short_sha}}
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set short SHA
        id: short_sha
        run: echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

  build_api_gateway_image:
    environment: prod
    name: Build API Gateway Image
    runs-on: ubuntu-latest
    needs: configure_tag
    outputs:
      image_url: ${{steps.image_build.outputs.image_tag}}
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push API gateway service image to Amazon ECR
        id: image_build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.API_GATEWAY_CONTAINER }}
          IMAGE_TAG: ${{ needs.configure_tag.outputs.short_sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile_api .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  build_auth_service_image:
    environment: prod
    name: Build Auth Service Image
    runs-on: ubuntu-latest
    needs: configure_tag
    outputs:
      image_tag: ${{steps.image_build.outputs.image_tag}}
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push API gateway service image to Amazon ECR
        id: image_build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.AUTH_SERVICE_CONTAINER }}
          IMAGE_TAG: ${{ needs.configure_tag.outputs.short_sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile_auth .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  build_connect_service_image:
    environment: prod
    name: Build Connect Service Image
    runs-on: ubuntu-latest
    needs: configure_tag
    outputs:
      image_tag: ${{steps.image_build.outputs.image_tag}}
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push API gateway service image to Amazon ECR
        id: image_build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.CONNECT_SERVICE_CONTAINER }}
          IMAGE_TAG: ${{ needs.configure_tag.outputs.short_sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile_connect .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  build_insight_service_image:
    environment: prod
    name: Build INSIGHT Service Image
    runs-on: ubuntu-latest
    needs: configure_tag
    outputs:
      image_tag: ${{steps.image_build.outputs.image_tag}}
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push API gateway service image to Amazon ECR
        id: image_build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.INSIGHT_SERVICE_CONTAINER }}
          IMAGE_TAG: ${{ needs.configure_tag.outputs.short_sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile_insight .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  build_kyc_service_image:
    environment: prod
    name: Build KYC Service Image
    runs-on: ubuntu-latest
    needs: configure_tag
    outputs:
      image_tag: ${{steps.image_build.outputs.image_tag}}
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push API gateway service image to Amazon ECR
        id: image_build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.KYC_SERVICE_CONTAINER }}
          IMAGE_TAG: ${{ needs.configure_tag.outputs.short_sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile_kyc .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  build_mail_service_image:
    environment: prod
    name: Build Mail Service Image
    runs-on: ubuntu-latest
    needs: configure_tag
    outputs:
      image_tag: ${{steps.image_build.outputs.image_tag}}
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push API gateway service image to Amazon ECR
        id: image_build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.MAIL_SERVICE_CONTAINER }}
          IMAGE_TAG: ${{ needs.configure_tag.outputs.short_sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile_mail .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  build_payment_service_image:
    environment: prod
    name: Build Payment Service Image
    runs-on: ubuntu-latest
    needs: configure_tag
    outputs:
      image_tag: ${{steps.image_build.outputs.image_tag}}
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push API gateway service image to Amazon ECR
        id: image_build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.PAYMENT_SERVICE_CONTAINER }}
          IMAGE_TAG: ${{ needs.configure_tag.outputs.short_sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile_payment .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy_to_ec2:
    environment: prod
    name: Deploy all containers to Amazon EC2
    runs-on: ubuntu-latest
    needs:
      - configure_tag
      - build_api_gateway_image
      - build_auth_service_image
      - build_connect_service_image
      - build_kyc_service_image
      - build_mail_service_image
      - build_payment_service_image

    steps:
      - name: Execute remote ssh commands using password
        env:
          PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY_PROD  }}
          HOSTNAME: ${{ secrets.AWS_EC2_HOST_PROD  }}
          USER_NAME: ${{ secrets.AWS_EC2_USERNAME_PROD  }}
          IMAGE_TAG: ${{ needs.configure_tag.outputs.short_sha }}

        run: |
          echo $IMAGE_TAG
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '

            #Now we have got the access of EC2 and we will start the deploy .
            bash server_deploy.sh $IMAGE_TAG
          '
